--- a/frontend/libpicofe/in_sdl.c	2019-07-04 23:14:07.132238430 +0200
+++ b/frontend/libpicofe/in_sdl.c	2019-07-05 14:00:16.034320754 +0200
@@ -263,6 +263,32 @@
 	return 1;
 }
 
+static int need_hat_to_axis(SDL_Event* event)
+{
+  if (event->type == SDL_JOYHATMOTION) return 1;
+  return 0;
+}
+
+#define MAKE_EVENT(s, d, a, v) do{ d->type = SDL_JOYAXISMOTION; d->jaxis.which = s->jhat.which; d->jaxis.axis = a; d->jaxis.value = v; }while(0)
+
+static int hat_to_axis(SDL_Event* in, SDL_Event* out1, SDL_Event* out2)
+{
+  switch(in->jhat.value)
+  {
+    case SDL_HAT_CENTERED:  { MAKE_EVENT(in, out1, 0, 0); MAKE_EVENT(in, out2, 1, 0); printf("center\r\n"); return 2; }
+    case SDL_HAT_UP:        { MAKE_EVENT(in, out1, 1, -32768); printf("up\r\n"); return 1; }
+    case SDL_HAT_RIGHTUP:   { MAKE_EVENT(in, out1, 1, -32768); MAKE_EVENT(in, out2, 0, 32767); printf("rightup\r\n"); return 2; }
+    case SDL_HAT_RIGHT:     { MAKE_EVENT(in, out1, 0, 32767); printf("right\r\n"); return 1; }
+    case SDL_HAT_RIGHTDOWN: { MAKE_EVENT(in, out1, 1, 32767); MAKE_EVENT(in, out2, 0, 32767); printf("rightdown\r\n"); return 2; }
+    case SDL_HAT_DOWN:      { MAKE_EVENT(in, out1, 1, 32767); printf("down\r\n"); return 1; }
+    case SDL_HAT_LEFTDOWN:  { MAKE_EVENT(in, out1, 1, 32767); MAKE_EVENT(in, out2, 0, -32768); printf("leftdown\r\n"); return 2; }
+    case SDL_HAT_LEFT:      { MAKE_EVENT(in, out2, 0, -32768); printf("left\r\n"); return 1; }
+    case SDL_HAT_LEFTUP:    { MAKE_EVENT(in, out1, 1, -32768); MAKE_EVENT(in, out2, 0, -32768); printf("leftup\r\n"); return 2; }
+    default: break;
+  }
+  return 0;
+}
+
 static int handle_joy_event(struct in_sdl_state *state, SDL_Event *event,
 	int *kc_out, int *down_out)
 {
@@ -346,6 +340,19 @@
 			break;
 		for (i = 0; i < count; i++) {
 			event = &events[i];
+
+			if (need_hat_to_axis(event))
+      {
+			  SDL_Event newevent1, newevent2; printf("must convert\r\n");
+			  int eventcount = hat_to_axis(event, &newevent1, &newevent2); printf("converted to %d events\r\n", eventcount);
+        if (eventcount != 0)
+        {
+          SDL_PushEvent(&newevent1);
+          if (eventcount > 1) SDL_PushEvent(&newevent2);
+        }
+        continue;
+      }
+
 			if (state->joy)
 				ret = handle_joy_event(state,
 					event, one_kc, one_down);
