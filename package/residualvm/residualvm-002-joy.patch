--- a/backends/events/sdl/resvm-sdl-events.cpp	2019-02-03 21:45:47.948024941 +0100
+++ b/backends/events/sdl/resvm-sdl-events.cpp	2019-02-04 19:58:28.928847842 +0100
@@ -28,6 +28,11 @@
 #include "backends/graphics/sdl/resvm-sdl-graphics.h"
 #include "engines/engine.h"
 #include "gui/gui-manager.h"
+#include "graphics/cursorman.h"
+
+#if defined(ENABLE_VKEYBD) && SDL_VERSION_ATLEAST(2, 0, 0)
+#define CONTROLLER_BUT_VKEYBOARD SDL_CONTROLLER_BUTTON_BACK
+#endif
 
 bool ResVmSdlEventSource::handleJoyButtonDown(SDL_Event &ev, Common::Event &event) {
 	if (shouldGenerateMouseEvents()) {
@@ -65,7 +70,16 @@ bool ResVmSdlEventSource::handleControll
 	if (shouldGenerateMouseEvents()) {
 		return SdlEventSource::handleControllerButton(ev, event, buttonUp);
 	} else {
-		event.type = buttonUp ? Common::EVENT_JOYBUTTON_UP : Common::EVENT_JOYBUTTON_DOWN;
+#ifdef ENABLE_VKEYBD
+		if (ev.cbutton.button == CONTROLLER_BUT_VKEYBOARD) {
+			if (!buttonUp) {
+				event.type = Common::EVENT_VIRTUAL_KEYBOARD;
+				return true;
+			}
+			return false;
+		}
+#endif
+		event.type = buttonUp ? Common::EVENT_CONTROLLERBUTTON_UP : Common::EVENT_CONTROLLERBUTTON_DOWN;
 		event.joystick.button = ev.cbutton.button;
 		return true;
 	}
@@ -75,7 +89,7 @@ bool ResVmSdlEventSource::handleControll
 	if (shouldGenerateMouseEvents()) {
 		return SdlEventSource::handleControllerAxisMotion(ev, event);
 	} else {
-		event.type = Common::EVENT_JOYAXIS_MOTION;
+		event.type = Common::EVENT_CONTROLLERAXIS_MOTION;
 		event.joystick.axis = ev.caxis.axis;
 		event.joystick.position = ev.caxis.value;
 		return true;
@@ -89,7 +103,8 @@ bool ResVmSdlEventSource::shouldGenerate
 		return true;
 	}
 
-	if (g_gui.isActive()) {
+	// FIXME: call to CursorMan.isVisible is not clean ! But don't know how to do better
+	if (g_gui.isActive() || CursorMan.isVisible()) {
 		return true;
 	}
 
@@ -115,7 +115,7 @@ bool ResVmSdlEventSource::handleKbdMouse
 			_km.x = oldKmX;
 			_km.y = oldKmY;
 		}
-
+		else
 		if (graphicsManager) {
 			graphicsManager->getWindow()->warpMouseInWindow((Uint16)(_km.x / MULTIPLIER), (Uint16)(_km.y / MULTIPLIER));
 		}
--- a/common/events.h	2019-02-03 19:29:17.000000000 +0100
+++ b/common/events.h	2019-02-03 21:56:19.602096698 +0100
@@ -91,7 +91,10 @@ enum EventType {
 	,
 	EVENT_JOYAXIS_MOTION = 23,
 	EVENT_JOYBUTTON_DOWN = 24,
-	EVENT_JOYBUTTON_UP = 25
+	EVENT_JOYBUTTON_UP = 25,
+	EVENT_CONTROLLERAXIS_MOTION = 26,
+	EVENT_CONTROLLERBUTTON_DOWN = 27,
+	EVENT_CONTROLLERBUTTON_UP = 28
 };
 
 const int16 JOYAXIS_MIN = -32768;
@@ -101,11 +104,11 @@ const int16 JOYAXIS_MAX = 32767;
  * Data structure for joystick events
  */
 struct JoystickState {
-	/** The axis for EVENT_JOYAXIS_MOTION events */
+	/** The axis for EVENT_JOYAXIS_MOTION/EVENT_CONTROLLERAXIS_MOTION events */
 	byte axis;
-	/** The new axis position for EVENT_JOYAXIS_MOTION events */
+	/** The new axis position for EVENT_JOYAXIS_MOTION/EVENT_CONTROLLERAXIS_MOTION events */
 	int16 position;
-	/** The button index for EVENT_JOYBUTTON_DOWN/UP events */
+	/** The button index for EVENT_JOYBUTTON_DOWN/UP/EVENT_CONTROLLERBUTTON_DOWN/UP events */
 	byte button;
 };
 /* END of ResidualVM-specific code */
--- a/engines/grim/grim_controls.cpp	2019-02-03 19:29:17.000000000 +0100
+++ b/engines/grim/grim_controls.cpp	2019-02-04 20:17:31.620842347 +0100
@@ -268,6 +268,25 @@ const ControlDescriptor controls[] = {
 	{ nullptr, 0 }
 };
 
+// Mapping between controller and joystick buttons
+const int controllerMapping[] = {
+	KEYCODE_JOY1_B1, // SDL_CONTROLLER_BUTTON_A
+	KEYCODE_JOY1_B2, // SDL_CONTROLLER_BUTTON_B
+	KEYCODE_JOY1_B3, // SDL_CONTROLLER_BUTTON_X
+	KEYCODE_JOY1_B4, // SDL_CONTROLLER_BUTTON_Y
+	KEYCODE_JOY1_B10, // SDL_CONTROLLER_BUTTON_BACK
+	0, // SDL_CONTROLLER_BUTTON_GUIDE
+	KEYCODE_JOY1_B9, // SDL_CONTROLLER_BUTTON_START
+	KEYCODE_JOY1_B8, // SDL_CONTROLLER_BUTTON_LEFTSTICK
+	KEYCODE_JOY1_B7, // SDL_CONTROLLER_BUTTON_RIGHTSTICK
+	KEYCODE_JOY1_B6, // SDL_CONTROLLER_BUTTON_LEFTSHOULDER
+	KEYCODE_JOY1_B5, // SDL_CONTROLLER_BUTTON_RIGHTSHOULDER
+	KEYCODE_JOY1_B11, // SDL_CONTROLLER_BUTTON_DPAD_UP
+	KEYCODE_JOY1_B12, // SDL_CONTROLLER_BUTTON_DPAD_DOWN
+	KEYCODE_JOY1_B13, // SDL_CONTROLLER_BUTTON_DPAD_LEFT
+	KEYCODE_JOY1_B14 // SDL_CONTROLLER_BUTTON_DPAD_RIGHT
+};
+
 // CHAR_KEY tests to see whether a keycode is for
 // a "character" handler or a "button" handler
 #define CHAR_KEY(k) ((k >= 'a' && k <= 'z') || (k >= 'A' && k <= 'Z') || (k >= '0' && k <= '9') || k == ' ')
@@ -380,5 +399,35 @@ void GrimEngine::handleJoyButton(Common:
 		_controlsState[keycode] = false;
 }
 
+void GrimEngine::handleControllerAxis(byte axis, int16 position) {
+	// No difference between controller and joystick for motion
+	handleJoyAxis(axis, position);
+}
+
+void GrimEngine::handleControllerButton(Common::EventType operation, byte button) {
+	int keycode = controllerMapping[button];
+        if (!_controlsEnabled[keycode])
+                return;
+
+        LuaObjects objects;
+        objects.add(keycode);
+        if (operation == Common::EVENT_CONTROLLERBUTTON_DOWN) {
+                objects.add(1);
+                objects.add(1);
+        } else if (operation == Common::EVENT_CONTROLLERBUTTON_UP) {
+                objects.addNil();
+                objects.add(0);
+        }
+        objects.add(0);
+        if (!LuaBase::instance()->callback("buttonHandler", objects)) {
+                error("handleControls: invalid keys handler");
+        }
+
+        if (operation == Common::EVENT_CONTROLLERBUTTON_DOWN)
+                _controlsState[keycode] = true;
+        else if (operation == Common::EVENT_CONTROLLERBUTTON_UP)
+                _controlsState[keycode] = false;
+}
+
 } // end of namespace Grim
 
--- a/engines/grim/grim.cpp	2019-02-03 21:16:51.596326864 +0100
+++ b/engines/grim/grim.cpp	2019-02-03 21:59:05.440659676 +0100
@@ -874,6 +874,10 @@ void GrimEngine::mainLoop() {
 				handleJoyAxis(event.joystick.axis, event.joystick.position);
 			if (type == Common::EVENT_JOYBUTTON_DOWN || type == Common::EVENT_JOYBUTTON_UP)
 				handleJoyButton(type, event.joystick.button);
+			if (type == Common::EVENT_CONTROLLERAXIS_MOTION)
+				handleControllerAxis(event.joystick.axis, event.joystick.position);
+			if (type == Common::EVENT_CONTROLLERBUTTON_DOWN || type == Common::EVENT_CONTROLLERBUTTON_UP)
+				handleControllerButton(type, event.joystick.button);
 			if (type == Common::EVENT_SCREEN_CHANGED) {
 				handleUserPaint();
 			}
--- a/engines/grim/grim.h	2019-02-03 19:29:17.000000000 +0100
+++ b/engines/grim/grim.h	2019-02-03 22:00:10.624102189 +0100
@@ -190,6 +190,8 @@ protected:
 	void handleChars(Common::EventType type, const Common::KeyState &key);
 	void handleJoyAxis(byte axis, int16 position);
 	void handleJoyButton(Common::EventType type, byte button);
+	void handleControllerAxis(byte axis, int16 position);
+	void handleControllerButton(Common::EventType type, byte button);
 	void handleExit();
 	void handlePause();
 	void handleUserPaint();
